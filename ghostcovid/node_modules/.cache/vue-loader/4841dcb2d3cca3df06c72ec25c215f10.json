{"remainingRequest":"C:\\Users\\JasminWagner\\Documents\\5DHITM\\Diplomprojekt\\Projekt\\ghostcovid\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\JasminWagner\\Documents\\5DHITM\\Diplomprojekt\\Projekt\\ghostcovid\\src\\views\\Statistik.vue?vue&type=template&id=3574d48e&","dependencies":[{"path":"C:\\Users\\JasminWagner\\Documents\\5DHITM\\Diplomprojekt\\Projekt\\ghostcovid\\src\\views\\Statistik.vue","mtime":1667670746690},{"path":"C:\\Users\\JasminWagner\\Documents\\5DHITM\\Diplomprojekt\\Projekt\\ghostcovid\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\JasminWagner\\Documents\\5DHITM\\Diplomprojekt\\Projekt\\ghostcovid\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\JasminWagner\\Documents\\5DHITM\\Diplomprojekt\\Projekt\\ghostcovid\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\JasminWagner\\Documents\\5DHITM\\Diplomprojekt\\Projekt\\ghostcovid\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1655712169000},{"path":"C:\\Users\\JasminWagner\\Documents\\5DHITM\\Diplomprojekt\\Projekt\\ghostcovid\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\JasminWagner\\Documents\\5DHITM\\Diplomprojekt\\Projekt\\ghostcovid\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9InN0YXRpc3RpayI+CiAgPEhlYWRlciAvPgogIDxzZWN0aW9uIGlkPSJiZWdydWVzc3VuZyI+CiAgICA8VGl0ZWwgbXNnPSJJbmZvcm1hdGlvbmVuIiAvPgogICAgPFppdGF0IG1zZz0iLi4uIE9mdCBmaW5kZW4gQmV0cm9mZmVuZSBuaWNodCBnZW51ZyBvZGVyIGRpZSByaWNodGlnZW4gSW5mb3JtYXRpb25lbi4gCiAgICAgICAgQXVmIHN0dW5kZW5sYW5nZXMgU3VjaGVuIHVuZCBEdXJjaHN0w7ZiZXJuIGRlcyBJbnRlcm5ldHMgaGFiZW4gZGllc2UgUGVyc29uZW4gCiAgICAgICAga2VpbmUgWmVpdCB1bmQgTHVzdCwgdW5kIHdlbm4gc2llIGVuZGxpY2ggZWluZSBXZWJzZWl0ZSB6dSBkZW0gVGhlbWEgCiAgICAgICAgZ2VmdW5kZW4gaGFiZW4sIGtvbW1lbiBzaWUgZXJzdCDDvGJlciBlaW5lbiBJcnJnYXJ0ZW4gYW4gTGlua3MgYW5zIFppZWwuIC4uLiIgbXNnMj0iR2hvc3QgQ292aWQiLz48YnI+PGJyPgogICAgPGEgaHJlZj0iI2NvbnRlbnRob21lIiBjbGFzcz0ic3RhcnRidXR0b24iPkxldCdzIPCdkojwnZKG8J2SlSDwnZKK8J2Sj/CdkofwnZKQ8J2Sk/Cdko7wnZKG8J2ShSB0b2dldGhlciE8L2E+CiAgPC9zZWN0aW9uPgogIDxzZWN0aW9uIGlkPSJjb250ZW50aG9tZSI+CiAgICA8cCBjbGFzcz0ibGV0cyI+VGVpbCBkZXIgQ29yb25haW5maXppZXJ0ZW4gZW50d2lja2VsdCBNRS9DRlM8L3A+CiAgICA8ZGl2IGNsYXNzPSJyb3cgaW5mb3MiPgogICAgICA8ZGl2IGNsYXNzPSJjb2wgczYiPgogICAgICAgIDxpbWcgY2xhc3M9ImluZm9nciIgc3JjPSIuLi9hc3NldHMvZ3JhZmlrMDEucG5nIiAvPgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0iY29sIHM2IGluZm90ZXh0Ij4KICAgICAgICAuLi4gVm9uIEJldHJvZmZlbmVuLCBkaWUgbWluZGVzdGVucyAyOCBUYWdlIG5hY2ggZGVyIEluZmVrdGlvbiBtaXQgU0FSUy1Db1YtMiB3ZWl0ZXJoaW4gCiAgICAgICAgU3ltcHRvbWUgYmVyaWNodGV0ZW4sIGxpdHRlbiBhdWNoIG5hY2ggNiBNb25hdGVuIG5vY2ggOTEsOCAlIGFuIHBlcnNpc3RpZXJlbmRlbiBTeW1wdG9tZW4uIAogICAgICAgIE5hY2ggNiBNb25hdGVuIHdhcmVuIGRpZSBkcmVpIGjDpHVmaWdzdGVuIFN5bXB0b21lIEZhdGlndWUsIFBvc3QtRXhlcnRpb25hbCBNYWxhaXNlIHVuZCAKICAgICAgICBCcmFpbiBGb2cgKGtvZ25pdGl2ZSBEeXNmdW5rdGlvbikuIC4uLiBEaWUgU2Nod2VyZSBkZXIgU3ltcHRvbWUgc2NoZWludCB0ZW5kZW56aWVsbCBhYnp1bmVobWVuLCAKICAgICAgICBhYmVyIGF1Y2ggbmFjaCA3IE1vbmF0ZW4gc3R1ZnRlIGRpZSBNZWhyaGVpdCBkZXIgU3R1ZGllbnRlaWxuZWhtZXIqaW5uZW4gaWhyZSBTeW1wdG9tZSBhbHMgCiAgICAgICAgbW9kZXJhdCBlaW4uIERpZSBBbnphaGwgZGVyIGJlcmljaHRldGVuIFN5bXB0b21lIGhhdHRlIGltIFNjaG5pdHQgaWhyZW4gSMO2aGVwdW5rdCBpbiBNb25hdCAyIHNlaXQgCiAgICAgICAgS3JhbmtoZWl0c2JlZ2lubiB1bmQgZmxhY2h0ZSBhbnNjaGxpZcOfZW5kIGluIGRlbiBGb2xnZW1vbmF0ZW4gbGVpY2h0IGFiLCBhdWYgZHVyY2hzY2huaXR0bGljaCAKICAgICAgICAxMyw4IFN5bXB0b21lIGluIE1vbmF0IDcuIC4uLiA8YnI+PGJyPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3Lm1lY2ZzLmRlL3N0dWRpZW4tenUtbG9uZy1jb3ZpZC1laW4tdGVpbC1kZXItY29yb25haW5maXppZXJ0ZW4tZW50d2lja2VsdC1tZS1jZnMvIiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJ3YXZlcy1lZmZlY3Qgd2F2ZXMtbGlnaHQgYnRuIGJ1dHRvbmluZiI+QXJ0aWtlbDwvYnV0dG9uPgogICAgICAgIDwvYT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxwIGNsYXNzPSJsZXRzIj4tPC9wPgogICAgPHAgY2xhc3M9ImxldHMiPkxvbmctQ09WSUQ6IERlciBsYW5nZSBXZWcgZGVyIEdlbmVzdW5nPC9wPgogICAgPGRpdiBjbGFzcz0icm93IGluZm9zIj4KICAgICAgPGRpdiBjbGFzcz0iY29sIHM2Ij4KICAgICAgICA8aW1nIGNsYXNzPSJpbmZvZ3IiIHNyYz0iLi4vYXNzZXRzL2dyYWZpazAyLnBuZyIgLz4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbCBzNiBpbmZvdGV4dCI+CiAgICAgICAgLSBCZWkgU3ltcHRvbWVuIGJpcyB6dSA0IFdvY2hlbiBuYWNoIGRlciBJbmZla3Rpb24gbWl0IGRlbSBTQVJTLUNvVi0yIFZpcnVzIGhhbmRlbHQgZXMgc2ljaCB1bSBha3V0ZXMgQ09WSUQtMTkuIAogICAgICAgIERhYmVpIHRyZXRlbiB2ZXJzY2hpZWRlbmUgU2Nod2VyZWdyYWRlIGF1Zi4gU2Nod2VyZSB1bmQga3JpdGlzY2hlIEbDpGxsZSBtw7xzc2VuIGltIFNwaXRhbCB2ZXJzb3JndCB3ZXJkZW4uIDxicj4KICAgICAgICAtIEltIHdlaXRlcmVuIFZlcmxhdWYgKDQtOCBXb2NoZW4pIHdlcmRlbiBkaWUgU3ltcHRvbWUgYWxzIGZvcnR3w6RocmVuZCBiZXplaWNobmV0LiBUeXBpc2NoZSBTeW1wdG9tZSBzaW5kIEh1c3RlbiwgCiAgICAgICAgQXRlbW5vdCwgRmllYmVyLCBIYWxzLS9Lb3BmLS9HbGllZGVyc2NobWVyemVuLiA8YnI+CiAgICAgICAgLSBCbGVpYmVuIGRpZSBTeW1wdG9tZSBsw6RuZ2VyIGFscyA4IFdvY2hlbiBiZXN0ZWhlbiB1bmQga8O2bm5lbiBuaWNodCBkdXJjaCB3ZWl0ZXJlIERpYWdub3NlbiBhbmRlcmVuIEVya3Jhbmt1bmdlbiAKICAgICAgICB6dWdlc2NocmllYmVuIHdlcmRlbiwgc3ByaWNodCBtYW4gdm9tIFBvc3QtQ09WSUQgU3luZHJvbS4gPGJyPgogICAgICAgIC0gSW4gRmFjaGtyZWlzZW4gd2lyZCBudW4gZGllIGdlc2FtdGUgWmVpdCBhYiA0IFdvY2hlbiBuYWNoIGRlciBJbmZla3Rpb24gYWxzIExvbmctQ09WSUQgYmV6ZWljaG5ldCwgc29iYWxkIHp1IAogICAgICAgIGRlbiBiZXN0ZWhlbmRlbiBTeW1wdG9tZW4gYXVjaCBuZXVlIGhpbnp1a29tbWVuLiA8YnI+PGJyPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnBmaXplcm1lZC5hdC9uZXdzL2xvbmctY292aWQtZGVyLWxhbmdlLXdlZy1kZXItZ2VuZXN1bmciIHRhcmdldD0iX2JsYW5rIj4KICAgICAgICAgIDxidXR0b24gY2xhc3M9IndhdmVzLWVmZmVjdCB3YXZlcy1saWdodCBidG4gYnV0dG9uaW5mIj5BcnRpa2VsPC9idXR0b24+CiAgICAgICAgPC9hPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPHAgY2xhc3M9ImxldHMiPi08L3A+CiAgICA8cCBjbGFzcz0ibGV0cyI+TG9uZyBDT1ZJRDwvcD4KICAgIDxkaXYgY2xhc3M9InJvdyBpbmZvcyI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbCBzNiI+CiAgICAgICAgPGltZyBjbGFzcz0iaW5mb2dyIiBzcmM9Ii4uL2Fzc2V0cy9ncmFmaWswMy5wbmciIC8+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJjb2wgczYgaW5mb3RleHQiPgogICAgICAgIC4uLiBHZWltcGZ0ZSBNZW5zY2hlbiBiZXJpY2h0ZW4sIG1laHIgTWVuc2NoZW4gbWl0IExvbmctQ09WSUQgenUga2VubmVuIGFscyBVbmdlaW1wZnRlLiBFaW5lIFVyc2FjaGUtV2lya3VuZ3MtSW50ZXJwcmV0YXRpb24gCiAgICAgICAgaXN0IGhpZXIgYWxsZXJkaW5ncyBuaWNodCBtw7ZnbGljaC4gSW4gZGVyIFRlbmRlbnogc2luZCBVbmdlaW1wZnRlLCBkaWUgTWVuc2NoZW4gbWl0IExvbmctQ09WSUQga2VubmVuIGVoZXIgaW1wZmJlcmVpdGVyIAogICAgICAgIGFscyBNZW5zY2hlbiwgZGllIG5pZW1hbmRlbiBtaXQgTG9uZy1DT1ZJRCBrZW5uZW4gKG4ucy4sIHAgPSAwLjA4KS4gVW5nZWFjaHRldCBkZXMgSW1wZnN0YXR1cyBtYWNodCBhYmVyIGVpbmUgQmVrYW5udHNjaGFmdCAKICAgICAgICBtaXQgTG9uZy1DT1ZJRCBldHdhcyBtaXQgZGVyIGVpZ2VuZW4gV2Focm5laG11bmc6IEJlZnJhZ3VuZ3N0ZWlsbmVobWVuZGUsIGRpZSBqZW1hbmRlbiBtaXQgTG9uZy1DT1ZJRCBrZW5uZW4sIHNjaMOkdHplbiBlaW5lIAogICAgICAgIEluZmVrdGlvbiBhbHMgcmlzaWtvcmVpY2hlciAoc2Nod2Vyd2llZ2VuZGVyKSBlaW4sIGhhYmVuIG1laHIgQW5nc3Qgdm9yIGVpbmVyIEluZmVrdGlvbiB1bmQgaGFiZW4gbWVociBTb3JnZW4gw7xiZXIgCiAgICAgICAgTGFuZ3plaXRmb2xnZW4uIEF1w59lcmRlbSBzaW5kIHNpZSBlaGVyIGbDvHIgZWluZSBJbXBmcGZsaWNodCBhbHMgTWVuc2NoZW4sIGRpZSBuaWVtYW5kZW4gbWl0IExvbmctQ09WSUQga2VubmVuLiAuLi4gPGJyPjxicj4KICAgICAgICA8YSBocmVmPSJodHRwczovL3Byb2pla3RlLnVuaS1lcmZ1cnQuZGUvY29zbW8yMDIwL3dlYi90b3BpYy9yaXNpa28tZW1vdGlvbmVuLXNvcmdlbi80MC1sb25nY292aWQvIiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJ3YXZlcy1lZmZlY3Qgd2F2ZXMtbGlnaHQgYnRuIGJ1dHRvbmluZiI+QXJ0aWtlbDwvYnV0dG9uPgogICAgICAgIDwvYT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L3NlY3Rpb24+CgogIDxGb290ZXIgLz4KPC9kaXY+Cgo="},null]}